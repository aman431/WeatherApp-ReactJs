{"version":3,"sources":["weather.js","form.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","country","temp_celsius","max","min","maxmin","temp_min","temp_max","description","form","error","onSubmit","loadweather","type","placeholder","name","App","getWeather","e","a","preventDefault","target","elements","value","fetch","api_call","json","response","setState","sys","celsius","calCelsius","main","temp","weather","state","undefined","Math","floor","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"kVAgCeA,MA7BC,SAACC,GAChB,OACC,yBAAKC,UAAY,aAChB,yBAAKA,UAAU,SACd,4BAAKD,EAAME,KAAX,IAAkBF,EAAMG,SACvBH,EAAMI,aAAc,wBAAIH,UAAU,QAAQD,EAAMI,aAA5B,SAAuD,KAahF,SAAgBC,EAAIC,GACnB,GAAGA,GAAOD,EACV,OACC,4BACA,0BAAMJ,UAAU,QAAQI,EAAxB,SACA,0BAAMJ,UAAU,QAAQK,EAAxB,UAdGC,CAAOP,EAAMQ,SAASR,EAAMS,UAC7B,wBAAIR,UAAU,eAAeD,EAAMU,gB,YCmBxBC,MA7BF,SAAAX,GACZ,OACC,yBAAKC,UAAW,cAChB,6BAAMD,EAAMY,MAoBZ,yBAAKX,UAAU,SAAf,iCApB4B,MAC5B,0BAAMY,SAAYb,EAAMc,aACxB,yBAAKb,UAAU,OACf,yBAAKA,UAAU,wBACf,2BAAOc,KAAK,OAAOd,UAAU,eAAee,YAAY,OAAOC,KAAK,UAEpE,yBAAKhB,UAAY,YACjB,2BAAOc,KAAK,OAAOd,UAAU,eAAee,YAAY,UAAUC,KAAK,aAEvE,yBAAKhB,UAAU,YACf,4BAAQA,UAAU,OAAlB,oBCmDaiB,E,kDA1Dd,aAAc,IAAD,8BACZ,gBAmBDC,WApBa,uCAoBA,WAAMC,GAAN,qBAAAC,EAAA,yDACZD,EAAEE,iBACIpB,EAAOkB,EAAEG,OAAOC,SAAStB,KAAKuB,MAC9BtB,EAAUiB,EAAEG,OAAOC,SAASrB,QAAQsB,OACvCvB,IAAQC,EAJC,iCAKWuB,MAAM,oDAAD,OAAqDxB,EAArD,YAA6DC,EAA7D,qBA5Bf,qCAuBD,cAKNwB,EALM,gBAMWA,EAASC,OANpB,OAMNC,EANM,OAOZ,EAAKC,SAAS,CACb5B,KAAM2B,EAASZ,KACfd,QAAS0B,EAASE,IAAI5B,QACtB6B,QAAS,EAAKC,WAAWJ,EAASK,KAAKC,MACvC1B,SAAU,EAAKwB,WAAWJ,EAASK,KAAKzB,UACxCD,SAAU,EAAKyB,WAAWJ,EAASK,KAAK1B,UACxCE,YAAamB,EAASO,QAAQ,GAAG1B,cAbtB,wBAkBZ,EAAKoB,SAAS,CAAClB,OAAM,IAlBT,4CApBA,sDAEZ,EAAKyB,MAAQ,CACZnC,UAAMoC,EACNnC,aAASmC,EACTJ,UAAMI,EACNN,aAASM,EACT7B,cAAU6B,EACV9B,cAAU8B,EACV5B,YAAa,GACbE,OAAO,GAVI,E,uDAeFuB,GAEV,OADWI,KAAKC,MAAML,EAAK,U,+BA0B3B,OACC,yBAAKlC,UAAW,OAChB,kBAAC,EAAD,CAAMa,YAAe2B,KAAKtB,WAAYP,MAAO6B,KAAKJ,MAAMzB,QACxD,kBAAC,EAAD,CACAV,KAAMuC,KAAKJ,MAAMnC,KACjBC,QAASsC,KAAKJ,MAAMlC,QACpBC,aAAcqC,KAAKJ,MAAML,QACzBxB,SAAUiC,KAAKJ,MAAM5B,SACrBA,SAAUgC,KAAKJ,MAAM7B,SACrBE,YAAe+B,KAAKJ,MAAM3B,mB,GApDXgC,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhD,GACLiD,QAAQjD,MAAMA,EAAMkD,c","file":"static/js/main.f79ba5fd.chunk.js","sourcesContent":["import React from 'react';\nimport './weather.css';\n\nconst Weather = (props) =>{\n\treturn(\n\t\t<div className = \"container\">\n\t\t\t<div className=\"cards\">\n\t\t\t\t<h1>{props.city} {props.country}</h1>\n\t\t\t\t{props.temp_celsius?(<h1 className=\"py-2\">{props.temp_celsius}&deg;c</h1>): null}\t\n\n\t\t\t\t{/*Calling max and minn **/}\n\t\t\t\t\n\t\t\t\t{maxmin(props.temp_min,props.temp_max)}\n\t\t\t\t<h4 className=\"description\">{props.description}</h4>\n\t\t\t\t\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\n\nfunction maxmin(max,min){\n\tif(min && max){\n\treturn(\n\t\t<h4>\n\t\t<span className=\"px-4\">{max}&deg;c</span>\n\t\t<span className=\"px-4\">{min}&deg;c</span>\n\t\t</h4>\n\t);\n}\n}\n\nexport default Weather;\n\n\n","import React from 'react';\nimport './form.css';\n\nconst form = props =>{\n\treturn(\n\t\t<div className =\"cointainer\">\n\t\t<div>{props.error ? error():null}</div>\n\t\t<form onSubmit = {props.loadweather}>\n\t\t<div className=\"row\">\n\t\t<div className=\"col-md-3 offset-md-2\">\n\t\t<input type=\"text\" className=\"form_control\" placeholder=\"City\" name=\"city\" />\n\t\t</div>\n\t\t<div className = \"col-md-3\">\n\t\t<input type=\"text\" className=\"form_control\" placeholder=\"Country\" name=\"country\" />\n\t\t</div>\n\t\t<div className=\"col-md-3\">\n\t\t<button className=\"btn\">Get Weather</button>\n\t\t</div>\n\t\t</div>\n\t\t</form>\n\t\t</div>\n\t);\n};\n\nfunction error(){\n\treturn(\n\t\t<div className=\"alert\">\n\t\tPlease Enter City and Country\n\t\t</div>\n\t);\n}\n\nexport default form;\n","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Weather from './weather';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Form from './form';\nconst apiKey = 'dd4b2c0bf6ced9e46923c2c31cc3b825';\n\nclass App extends React.Component{\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcity: undefined,\n\t\t\tcountry: undefined,\n\t\t\tmain: undefined,\n\t\t\tcelsius: undefined,\n\t\t\ttemp_max: undefined,\n\t\t\ttemp_min: undefined,\n\t\t\tdescription: '',\n\t\t\terror: false\n\t\t};\n\t\t//this.getWeather();\n\t}\n\n\tcalCelsius(temp){\n\t\tlet cell = Math.floor(temp-273.15);\n\t\treturn cell;\n\t}\n\t//Calling a Api\n\tgetWeather = async(e) =>{\n\t\te.preventDefault();\n\t\tconst city = e.target.elements.city.value;\n\t\tconst country = e.target.elements.country.value;\n\t\tif(city && country){\n\t\tconst api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country},uk&appid=${apiKey}`);\n\t\tconst response = await api_call.json();\n\t\tthis.setState({\n\t\t\tcity: response.name,\n\t\t\tcountry: response.sys.country,\n\t\t\tcelsius: this.calCelsius(response.main.temp),\n\t\t\ttemp_max: this.calCelsius(response.main.temp_max),\n\t\t\ttemp_min: this.calCelsius(response.main.temp_min),\n\t\t\tdescription: response.weather[0].description\n\t\t})\n\t\t//console.log(response);\n\t\t//console.log(response.weather[0].description);\n\t}else{\n\t\tthis.setState({error:true});\n\t}\n\t};\nrender(){\n  return (\n\t  <div className =\"App\">\n\t  <Form loadweather = {this.getWeather} error={this.state.error}/>\n\t  <Weather \n\t  city={this.state.city} \n\t  country={this.state.country} \n\t  temp_celsius={this.state.celsius} \n\t  temp_min={this.state.temp_max} \n\t  temp_max={this.state.temp_min}\n\t  description = {this.state.description}\n\t  />\n\t  </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}